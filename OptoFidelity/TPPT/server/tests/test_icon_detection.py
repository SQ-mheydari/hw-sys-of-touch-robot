import numpy as np

from tntserver.Nodes.TnT.Camera import *
from tntserver.Nodes.TnT.Detector import *
from tntserver.Nodes.TnT.Dut import *
from tntserver.Nodes.TnT.Images import *
from tntserver.Nodes.TnT.Detectors import *
from tntserver.drivers.detectors.Halcon import *

import os
import pytest

icon_name = 'png_test.png'
icon_file = os.path.abspath(os.path.join(os.getcwd(), 'tests', 'images', icon_name))
screenshots_folder = os.path.abspath(os.path.join(os.getcwd(), 'tests', 'data', 'screenshots'))
image_path = os.path.abspath(os.path.join(os.getcwd(), 'tests', 'images'))

# Test data for color comparison.
color_icon_image_names = [
        "star_blue.png",
        "star_blue_cropped.png",
        "star_blue_dark.png",
        "star_blue_low_contrast.png",
        "star_blue_blurred.png",
        "star_blue_trans_rot.png",
        "star_blue_noise.png",
        "star_blue_small.png",
        "star_red.png",
        "star_green.png"
    ]


def from_jsonout(jsonout_input):
    """
    Changes @json_out formatted input back to python form
    NOTE: might not handle for example None well
    :param input: @json_out formatted tuple
    :param jsonout_input: @json_out formatted tuple
    :return: the python form of the binary part
    """
    return json.loads(jsonout_input[1].decode('utf-8'))


def init_all(**kwargs):
    """
    Initiate following nodes for unit test:
    - Camera
    - Dut
    - Halcon detector
    - Halcon_lecacy detector
    - Detectors
    - Images
    :return: dict of nodes initiated
    """

    root = Node("root")
    Node.root = root

    # dut screenshot needs this
    calibration = {}
    calibration['intrinsic'] = [[6242, 0, 1295], [0, 6236, 971], [0, 0, 1]]
    calibration['dist_coeffs'] = [-1.4469, 5, 0, 0, 26]
    calibration['ppmm'] = 16

    camera = Camera("Camera1")
    camera._init(driver="test")
    camera.calibration = calibration
    root.add_child(camera)

    images = Images('images')
    os.makedirs(screenshots_folder, exist_ok=True)
    images.image_folder_path = screenshots_folder
    root.add_child(images)

    halcon = Detector(name='halcon')
    halcon._init(driver='Halcon', simulator=True, **kwargs)
    root.add_child(halcon)

    # Camera.get_detect_icon() needs this
    detectors = Detectors('detectors')
    detectors.add_child(halcon)
    root.add_child(detectors)

    # dut screenshot needs this
    dut = Dut('dut_test')
    dut.tl = {"x": 20, "y": 30, "z": -10}
    dut.tr = {"x": 100, "y": 30, "z": -10}
    dut.tl = {"x": 20, "y": 130, "z": -10}

    results = {}
    results['halcon'] = halcon
    results['dut'] = dut
    results['camera'] = camera

    return results


def test_dut_post_find_objects():
    """
    Test for Dut.post_find_objects()
    :return:
    """
    all_nodes = init_all()
    results = all_nodes['dut'].post_find_objects(filename=icon_file)
    results = from_jsonout(results)
    result = results['results'][0]
    assert result['score'] == pytest.approx(0.9)
    assert result['scale'] == pytest.approx(0.3)
    assert result['angle'] == pytest.approx(30)
    assert result['centerX'] == pytest.approx(9.6875)
    assert result['centerY'] == pytest.approx(13.125)
    assert result['topLeftX'] == pytest.approx(0.625)
    assert result['topLeftY'] == pytest.approx(1.25)
    assert result['bottomRightX'] == pytest.approx(18.75)
    assert result['bottomRightY'] == pytest.approx(25)
    assert result['centerX_px'] == pytest.approx(155)
    assert result['centerY_px'] == pytest.approx(210)
    assert result['topLeftX_px'] == pytest.approx(10)
    assert result['topLeftY_px'] == pytest.approx(20)
    assert result['bottomRightX_px'] == pytest.approx(300)
    assert result['bottomRightY_px'] == pytest.approx(400)
    assert icon_name in result['shape'].lower()
    assert len(result.keys()) == 16

    screenshot = results['screenshot']
    img = Node.find(screenshot)
    assert img is not None


    # remove screenshots generated by this test
    # as post_find_objects() doesn't return either screenshot image object or image file name,
    # so delete all files under tests/data/screenshots/ (which is used only for this test)
    for f in os.listdir(screenshots_folder):
        try:
            os.remove(os.path.join(screenshots_folder, f))
        except:
            pass


def test_get_detect_icon():
    """
    Test for Camera.get_detect_icon()
    :return:
    """
    all_nodes = init_all()
    results = all_nodes['camera'].get_detect_icon(icon=icon_file, detector=all_nodes['halcon'].name)
    result = from_jsonout(results)[0]
    assert result['confidence'] == pytest.approx(0.9)
    assert np.allclose(result['box_px'], [10, 20, 300, 400])
    assert result['center_x'] == pytest.approx(155)
    assert result['center_y'] == pytest.approx(210)
    assert result['angle'] == pytest.approx(30)
    assert result['scale'] == pytest.approx(0.3)
    assert result['duration'] == pytest.approx(0)
    assert 'halcon' in result['detector'].lower()
    assert result['pose'][0] == pytest.approx(22.3125)
    assert result['pose'][1] == pytest.approx(-10.875)
    assert result['size_mm'][0] == pytest.approx(-18.125)
    assert result['size_mm'][1] == pytest.approx(23.75)
    assert result['topLeftX_px'] == pytest.approx(10)
    assert result['topLeftY_px'] == pytest.approx(20)
    assert result['bottomRightX_px'] == pytest.approx(300)
    assert result['bottomRightY_px'] == pytest.approx(400)
    assert len(result.keys()) == 14


def test_get_detect_icon_with_color_moments():
    """
    Test icon detection code with moment based color detection.
    Does not validate result.
    """
    color_cmp_params = {
        "multiplier": 1.2,
        "threshold": 0.3,
        "extract_foreground": True
    }

    all_nodes = init_all(color_cmp_method="moments", color_cmp_params=color_cmp_params)
    all_nodes['camera'].get_detect_icon(icon=icon_file, detector=all_nodes['halcon'].name)


def test_get_detect_icon_with_color_histogram():
    """
    Test icon detection code with histogram based color detection.
    Does not validate result.
    """
    color_cmp_params = {
        "multiplier": 1.2,
        "threshold": 0.3,
        "extract_foreground": True,
        "num_bins": 12
    }

    all_nodes = init_all(color_cmp_method="histogram", color_cmp_params=color_cmp_params)
    all_nodes['camera'].get_detect_icon(icon=icon_file, detector=all_nodes['halcon'].name)


def test_get_detect_icon_with_color_template():
    """
    Test icon detection code with template matching based color detection.
    Does not validate result.
    """
    color_cmp_params = {
        "threshold": 0.3,
        "extract_foreground": True
    }

    all_nodes = init_all(color_cmp_method="template", color_cmp_params=color_cmp_params)
    all_nodes['camera'].get_detect_icon(icon=icon_file, detector=all_nodes['halcon'].name)


def test_compute_color_moments_score():
    score = []

    # Blue star is the reference.
    reference = cv2.imread(os.path.join(image_path, color_icon_image_names[0]))

    for name in color_icon_image_names:
        image = cv2.imread(os.path.join(image_path, name))

        score.append(compute_color_score_moments(reference, image))

    #print(score)

    # Reference score. All but the last two should have "high score" and the last two should have "low score".
    ref_score = [
        1.0,                # Reference image gives perfect match.
        0.9678475001922451, # Cropping roughly maintains score.
        0.9970234867251472, # Darkened version maintains score.
        0.7854341109967526, # Low contrast lowers score.
        0.9348156762549787, # Blur maintains score.
        0.9998952431845134, # Affine transform maintains score.
        0.7721864742270669, # Noise lowers score.
        0.997811198237292,  # Downscaling maintains score.
        0.490663290887193, # Blue -> red lowers score (desired behavior).
        0.5214949677549918  # Blue -> green lowers score (desired behavior).
    ]

    assert np.allclose(score, ref_score)


def test_compute_color_hist_score():
    score = []

    # Blue star is the reference.
    reference = cv2.imread(os.path.join(image_path, color_icon_image_names[0]))

    for name in color_icon_image_names:
        image = cv2.imread(os.path.join(image_path, name))

        score.append(compute_color_score_hist(reference, image))

    #print(score)

    # Reference score. All but the last two should have "high score" and the last two should have "low score".
    ref_score = [
        1.0,                 # Reference image gives perfect match.
        0.5731355302138306,  # Cropping significantly lowers score.
        0.9995421220754174,  # Darkened version maintains score.
        0.9989501225363124,  # Low contrast maintains score.
        0.6983216284236313,  # Blur lowers score.
        0.9991339800528481,  # Affine transform maintains score.
        0.4300269995161731,  # Noise significantly lowers score.
        0.9879716318496425,  # Downscaling maintains score.
        0.7535744879639004,  # Blue -> red lowers score (desired behavior).
        0.8275455795440257   # Blue -> green lowers score (desired behavior).
    ]

    assert np.allclose(score, ref_score)


def test_compute_color_score_template_match():
    score = []

    # Blue star is the reference.
    reference = cv2.imread(os.path.join(image_path, color_icon_image_names[0]))

    for name in color_icon_image_names:
        image = cv2.imread(os.path.join(image_path, name))

        score.append(compute_color_score_template_match(image, reference))

    #print(score)

    # Reference score. All but the last two should have "high score" and the last two should have "low score".
    ref_score = [
        0.9999999403953552,  # Reference image gives perfect match.
        0.9998334646224976,  # Darkened version maintains score.
        0.9999948143959045,  # Cropped version maintains score.
        0.9999805092811584,  # Low contrast maintains score.
        0.870279848575592,   # Blur lowers score.
        0.5241427421569824,  # Affine significantly lowers score.
        0.6545891165733337,  # Noise significantly lowers score.
        0.4467449486255646,  # Downscaling significantly lowers score.
        0.7350735664367676,  # Blue -> red lowers score (desired behavior).
        0.8014094829559326   # Blue -> green lowers score (desired behavior).
    ]

    assert np.allclose(score, ref_score)


def test_compute_color_score_template_match_scaling():
    # Test that template_scale parameter works when comparing reference_image to a scaled version of itself.
    reference = cv2.imread(os.path.join(image_path, color_icon_image_names[0]))

    scale = 0.5

    reference_scaled = cv2.resize(reference, dsize=None, fx=scale, fy=scale)

    score = compute_color_score_template_match(reference_scaled, reference, template_scale=scale)

    assert score == pytest.approx(1.0)


def test_extract_foreground():
    image = cv2.imread(os.path.join(image_path, "star_blue_gradient_bg.png"))
    reference = cv2.imread(os.path.join(image_path, "star_blue_gradient_bg_removed.png"))

    image = extract_foreground(image, blk_size=33, const=2)

    assert np.allclose(image, reference)


def test_compare_quantized_colors():
    image = cv2.imread(os.path.join(image_path, "star_blue_gradient_bg.png"))

    # Should find this blue-ish color.
    score = compute_color_score_quantized(image, [(53, 91, 201)], threshold=0.02)

    assert score > 0.9

    # Should not find this red color.
    score = compute_color_score_quantized(image, [(200, 10, 0)], threshold=0.02)

    assert score < 0.1
