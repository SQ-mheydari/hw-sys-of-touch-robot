from tntserver.drivers.robots.goldenmov import GoldenMovRecorder
from tntserver import robotmath

import glob
import os.path
import numpy as np
import json

AXIS_DATA_PATH = os.path.join("tests", "axis_data")


class ProgramArguments:
    def __init__(self):
        self.visual_simulation = False


class GestureRecorder:
    """
    Record gesture parameters and produced axis data to files.
    This essentially provides counter for naming output files with increasing number postfix.
    """
    def __init__(self, directory, create_environment):
        self.counter = 0
        self.directory = directory
        self.create_environment = create_environment

    def record(self, gesture_name, gesture_args):
        # Create new environment for running each gesture.
        robot, gestures = self.create_environment()

        gesture_func = getattr(gestures, gesture_name)

        with GoldenMovRecorder(robot.driver):
            gesture_func(**gesture_args)

            executed_axes = robot.driver.executed_axes

        path = "gesture{}.json".format(self.counter)
        path = os.path.join(self.directory, path)

        data = {
            "gesture": gesture_name,
            "args": gesture_args,
            "buffered_motions": executed_axes
        }

        with open(path, "w") as f:
            f.write(json.dumps(data, indent=0))

        self.counter += 1

        print("Recorded gesture {}: {} buffered motions".format(gesture_name, len(executed_axes)))


def compare_axes(axes1, axes2):
    """
    Compare to axes dictionaries to make sure they match exactly.
    Errors are reported via assert.
    :param axes1: Axes dict e.g. {"x": [0, 1, 2], "y": [0, 0, 0]}.
    :param axes2: Axes dict e.g. {"x": [0, 1, 2], "y": [0, 0, 0]}.
    """
    keys1 = axes1.keys()
    keys2 = axes2.keys()

    assert len(keys1) == len(keys2)

    for key in keys1:
        assert key in keys2

        values1 = axes1[key]
        values2 = axes2[key]

        assert len(values1) == len(values2)

        for i in range(len(values1)):
            # Allow small deviations due to round-off errors.
            # Code refactoring can alter round-offs which should be acceptable.
            assert np.allclose(values1, values2, atol=1e-6)


def _test_gestures(directory, create_environment):
    """
    Test gestures by comparing axes data to previously computed record.
    This is just utility functions used by the specific test cases.
    """

    filenames = glob.glob(os.path.join(AXIS_DATA_PATH, directory, "*.json"))

    # In case the directory does not exist (e.g. if working directory is wrong) glob will not raise exception
    # but rather returns empty list. Make sure there are some tests to run.
    assert len(filenames) > 0

    # Loop through all axis data records and compare to ones generated by current code.
    for filename in filenames:
        with open(filename, "r") as f:
            data = json.loads(f.read())

        print("Testing gesture: " + data["gesture"])

        # Run each gesture in clean environment.
        robot, gestures = create_environment()

        # Run the gesture as specified by the record.
        gesture_func = getattr(gestures, data["gesture"])

        with GoldenMovRecorder(robot.driver):
            gesture_func(**data["args"])

            executed_axes = robot.driver.executed_axes

        # Make sure that the movement has the same number of buffered motions.
        assert len(executed_axes) == len(data["buffered_motions"])

        for i in range(len(executed_axes)):
            compare_axes(executed_axes[i], data["buffered_motions"][i])

    #robot.put_plot_executed_axes()


def record_base_gestures(recorder):
    """
    Run a fixed set of gestures and save the axes data to file record.
    This is intended to be used when updating the record.
    Not ran as part of unit tests.
    """

    recorder.record("put_tap", {"x": 3, "y": 4, "z": 10, "tilt": 0, "azimuth": 0, "clearance": -1, "duration": 0.3})

    recorder.record("put_double_tap", {"x": 3, "y": 4, "z": 10, "tilt": 0, "azimuth": 0, "clearance": -1,
                                       "duration": 0.2, "interval": 1.0})

    # TODO: Test press if force and be simulated somehow.

    recorder.record("put_swipe", {"x1": 3, "y1": 4, "x2": 50, "y2": 60,
                                  "tilt1": 0, "tilt2": 0, "azimuth1": 0, "azimuth2": 0,
                                  "clearance": -1, "radius": 10})

    recorder.record("put_drag", {"x1": 3, "y1": 4, "x2": 50, "y2": 60,
                                  "tilt1": 0, "tilt2": 0, "azimuth1": 0, "azimuth2": 0,
                                  "clearance": -1, "predelay": 0.3, "postdelay": 0.6})

    # TODO: Test drag force if force and be simulated somehow.

    recorder.record("put_jump", {"x": 3, "y": 4, "z": 10})
    recorder.record("put_jump", {"x": 3, "y": 4, "z": 10})
    recorder.record("put_jump", {"x": 3, "y": 4, "z": 10, "jump_height": 30})

    recorder.record("put_circle", {"x": 20, "y": 25, "r": 15, "n": 2, "angle": 45, "z": 10,
                                   "tilt": 0, "azimuth": 0, "clearance": -1, "clockwise": False})

    recorder.record("put_multiswipe", {"x1": 3, "y1": 4, "x2": 50, "y2": 55, "z": 10,
                                  "tilt": 0, "azimuth": 0, "clearance": -1, "n": 3})

    recorder.record("put_path", {"points":
                                 [
                                     {"x": 3, "y": 4, "z": 1, "tilt": 0, "azimuth": 0},
                                     {"x": 40, "y": 45, "z": 1, "tilt": 0, "azimuth": 0},
                                     {"x": 40, "y": 0, "z": 1, "tilt": 0, "azimuth": 0},
                                     {"x": 3, "y": 4, "z": 1, "tilt": 0, "azimuth": 0}
                                 ], "clearance": -1})

    # TODO: Test scan if sampling is simulated somehow.

    recorder.record("put_pose", {"pose": robotmath.xyz_to_frame(20, 20, 0).tolist()})

    recorder.record("put_watchdog_tap",
                    {"x": 3, "y": 4, "z": 10, "tilt": 0, "azimuth": 0, "clearance": -1, "duration": 0.3})
